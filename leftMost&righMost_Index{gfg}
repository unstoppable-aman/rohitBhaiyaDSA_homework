Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element X in the given array.

Note: If the element is not present in the array return {-1,-1} as pair.

Example 1:

Input:
N = 9
v[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}
X = 5
Output:
2 5
Explanation:
Index of first occurrence of 5 is 2
and index of last occurrence of 5 is 5.
Example 2:

Input:
N = 9
v[] = {1, 3, 5, 5, 5, 5, 7, 123, 125}
X = 7
Output:
6 6

************************************SOLUTION*********************************************************************************************************

pair<long,long> indexes(vector<long long> v, long long x)
    {
        long long start=0,end=v.size()-1,left_index=-1,right_index=-1,mid;
        //left index
        while(start<=end)
        {
            mid=end+(start-end)/2;
            if(v[mid]==x)
            {
                left_index=mid;
                end=mid-1;
            }
            else if(x>v[mid])
                start=mid+1;
            else 
                end=mid-1;
        }
        start=0;
        end=v.size()-1;
        //right index
        while(start<=end)
        {
            mid=end+(start-end)/2;
            if(v[mid]==x)
            {
                right_index=mid;
                start=mid+1;
            }
            else if(x>v[mid])
                start=mid+1;
            else 
                end=mid-1;
        }
        return {left_index,right_index};
    }
