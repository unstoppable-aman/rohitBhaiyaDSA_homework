You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Example 1:

Input:
n=5 
k=3
stalls = [1 2 4 8 9]
Output:
3
Explanation:
The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, 
which also is the largest among all possible ways.
Example 2:

Input:
n=5 
k=3
stalls = [10 1 2 7 5]
Output:
4
Explanation:
1   2   5   7   10
c1      c2      c3
The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4,
which also is the largest among all possible ways.


****************************************************************SOLUTION*****************************************************************

 int solve(int n, int k, vector<int> &stalls) {
    
        int start=1,end=stalls[0],mid,minimum=stalls[0],ans;
        for(int i=1;i<n;i++)
        {
            minimum=min(minimum,stalls[i]);
            end=max(end,stalls[i]);
        }
        sort(stalls.begin(),stalls.end());
        end-=minimum;
        while(start<=end)
        {
            int count=1,lastpos=stalls[0];
            mid=(start+end)/2;
            for(int i=0;i<n;i++)
            {
                if(stalls[i]-lastpos>=mid)
                {
                    count++;
                    lastpos=stalls[i];
                }
                if(count==k)
                    break;
            }
            if(count==k)//allocation possible with distance mid
            {   
                ans=mid;
                start=mid+1;
            }
            else//allocation not possible with distance mid
                end=mid-1;
        }
        return ans;
    }
